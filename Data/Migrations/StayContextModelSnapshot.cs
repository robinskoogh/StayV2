// <auto-generated />
using Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace Stay.Data.Migrations
{
    [DbContext(typeof(StayContext))]
    partial class StayContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "09249631-383f-40fa-8d53-cd84b975e5f6",
                            ConcurrencyStamp = "1",
                            Name = "Administratör",
                            NormalizedName = "Administratör"
                        },
                        new
                        {
                            Id = "283043bf-091a-44ea-b389-23ab247d3541",
                            ConcurrencyStamp = "1",
                            Name = "Mäklare",
                            NormalizedName = "Mäklare"
                        },
                        new
                        {
                            Id = "60aaa647-e0ec-4680-9851-f0293ad22a6b",
                            ConcurrencyStamp = "1",
                            Name = "Användare",
                            NormalizedName = "Användare"
                        },
                        new
                        {
                            Id = "3b3d4061-48cc-463b-95c4-eece508245a4",
                            ConcurrencyStamp = "1",
                            Name = "Chef",
                            NormalizedName = "Chef"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstateObjectUser", b =>
                {
                    b.Property<int>("FavoritesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersFavoritedId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoritesId", "UsersFavoritedId");

                    b.HasIndex("UsersFavoritedId");

                    b.ToTable("RealEstateObjectUser");
                });

            modelBuilder.Entity("RealEstateObjectUser1", b =>
                {
                    b.Property<string>("InterestedUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InterestingListingsId")
                        .HasColumnType("int");

                    b.HasKey("InterestedUsersId", "InterestingListingsId");

                    b.HasIndex("InterestingListingsId");

                    b.ToTable("RealEstateObjectUser1");
                });

            modelBuilder.Entity("RealtorRequestUser", b =>
                {
                    b.Property<string>("RealtorRequestsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserRequestsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RealtorRequestsId", "UserRequestsId");

                    b.HasIndex("UserRequestsId");

                    b.ToTable("RealtorRequestUser");
                });

            modelBuilder.Entity("Core.Models.Image", b =>
                {
                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("RealEstateObjectId")
                        .HasColumnType("int");

                    b.HasKey("FileName");

                    b.HasIndex("RealEstateObjectId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Models.RealEstateObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Balcony")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateForViewing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GrossArea")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("LivingArea")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("NrOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("NrOfViews")
                        .HasColumnType("int");

                    b.Property<double>("PlotSize")
                        .HasColumnType("float");

                    b.Property<string>("PostalTown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PropType")
                        .HasColumnType("int");

                    b.Property<int?>("RealEstateObjectViewModelId")
                        .HasColumnType("int");

                    b.Property<int?>("RealtorFirmId")
                        .HasColumnType("int");

                    b.Property<string>("RealtorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sublocality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RealEstateObjectViewModelId");

                    b.HasIndex("RealtorFirmId");

                    b.HasIndex("RealtorId");

                    b.ToTable("RealEstateObjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Östmans väg 2",
                            Balcony = true,
                            City = "Haparanda",
                            ConstructionYear = 1990,
                            ContractType = 1,
                            DateForViewing = new DateTime(2022, 4, 21, 13, 56, 31, 399, DateTimeKind.Local).AddTicks(1859),
                            DateUploaded = new DateTime(2022, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bästa lägenhet",
                            GrossArea = 120.0,
                            Latitude = 65.838300000000004,
                            LivingArea = 60.0,
                            Longitude = 24.112200000000001,
                            NrOfRooms = 2,
                            NrOfViews = 20,
                            PlotSize = 60.0,
                            PostalTown = "Stockholm",
                            Price = 1000000,
                            PropType = 0,
                            Sublocality = "Norrmalm",
                            ZipCode = 95334
                        },
                        new
                        {
                            Id = 2,
                            Address = "Pipons väg 2",
                            Balcony = false,
                            City = "Haparanda",
                            ConstructionYear = 1940,
                            ContractType = 0,
                            DateForViewing = new DateTime(2022, 4, 21, 13, 56, 31, 399, DateTimeKind.Local).AddTicks(1894),
                            DateUploaded = new DateTime(2022, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dåligt lägenhet",
                            GrossArea = 130.0,
                            Latitude = 65.836100000000002,
                            LivingArea = 60.0,
                            Longitude = 24.1081,
                            NrOfRooms = 2,
                            NrOfViews = 100,
                            PlotSize = 70.0,
                            PostalTown = "Stockholm",
                            Price = 400000,
                            PropType = 0,
                            Sublocality = "Norrmalm",
                            ZipCode = 95334
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sågaregatan 65",
                            Balcony = false,
                            City = "Haparanda",
                            ContractType = 1,
                            DateForViewing = new DateTime(2022, 4, 21, 13, 56, 31, 399, DateTimeKind.Local).AddTicks(1897),
                            DateUploaded = new DateTime(2022, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bästa lägenhet",
                            GrossArea = 220.0,
                            Latitude = 65.827200000000005,
                            LivingArea = 120.0,
                            Longitude = 24.121600000000001,
                            NrOfRooms = 4,
                            NrOfViews = 99,
                            PlotSize = 100.0,
                            PostalTown = "Stockholm",
                            Price = 4000000,
                            PropType = 0,
                            Sublocality = "Norrmalm",
                            ZipCode = 95333
                        },
                        new
                        {
                            Id = 4,
                            Address = "Vindstigen 7",
                            Balcony = true,
                            City = "Spånga",
                            ConstructionYear = 1964,
                            ContractType = 0,
                            DateForViewing = new DateTime(2022, 4, 21, 13, 56, 31, 399, DateTimeKind.Local).AddTicks(1900),
                            DateUploaded = new DateTime(2022, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dåligt lägenhet",
                            GrossArea = 90.0,
                            Latitude = 59.3825,
                            LivingArea = 60.0,
                            Longitude = 17.885400000000001,
                            NrOfRooms = 1,
                            NrOfViews = 1000,
                            PlotSize = 30.0,
                            PostalTown = "Stockholm",
                            Price = 100000,
                            PropType = 0,
                            Sublocality = "Norrmalm",
                            ZipCode = 16351
                        },
                        new
                        {
                            Id = 5,
                            Address = "Solhems hagväg 168",
                            Balcony = true,
                            City = "Spånga",
                            ContractType = 1,
                            DateForViewing = new DateTime(2022, 4, 21, 13, 56, 31, 399, DateTimeKind.Local).AddTicks(1904),
                            DateUploaded = new DateTime(2022, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bästa lägenhet",
                            GrossArea = 220.0,
                            Latitude = 59.388599999999997,
                            LivingArea = 60.0,
                            Longitude = 17.897600000000001,
                            NrOfRooms = 5,
                            NrOfViews = 10,
                            PlotSize = 160.0,
                            PostalTown = "Märsta",
                            Price = 40000000,
                            PropType = 3,
                            Sublocality = "Märsta Norra",
                            ZipCode = 16356
                        },
                        new
                        {
                            Id = 6,
                            Address = "Silverdalsvägen 39",
                            Balcony = false,
                            City = "Ekerö",
                            ConstructionYear = 2014,
                            ContractType = 1,
                            DateForViewing = new DateTime(2022, 4, 21, 13, 56, 31, 399, DateTimeKind.Local).AddTicks(1906),
                            DateUploaded = new DateTime(2022, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dåligt lägenhet",
                            GrossArea = 70.0,
                            Latitude = 59.281199999999998,
                            LivingArea = 60.0,
                            Longitude = 17.798200000000001,
                            NrOfRooms = 3,
                            NrOfViews = 22,
                            PlotSize = 10.0,
                            PostalTown = "Märsta",
                            Price = 2100000,
                            PropType = 0,
                            Sublocality = "Märsta Norra",
                            ZipCode = 17834
                        },
                        new
                        {
                            Id = 7,
                            Address = "Växthusvägen 1",
                            Balcony = false,
                            City = "Ekerö",
                            ConstructionYear = 1960,
                            ContractType = 1,
                            DateForViewing = new DateTime(2022, 4, 21, 13, 56, 31, 399, DateTimeKind.Local).AddTicks(1909),
                            DateUploaded = new DateTime(2022, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bästa lägenhet",
                            GrossArea = 1200.0,
                            Latitude = 59.281199999999998,
                            LivingArea = 200.0,
                            Longitude = 17.788699999999999,
                            NrOfRooms = 6,
                            NrOfViews = 12,
                            PlotSize = 1000.0,
                            PostalTown = "Märsta",
                            Price = 2900000,
                            PropType = 1,
                            Sublocality = "Märsta Norra",
                            ZipCode = 17834
                        },
                        new
                        {
                            Id = 8,
                            Address = "Bostadsvägen 4",
                            Balcony = false,
                            City = "Hemma",
                            ConstructionYear = 1960,
                            ContractType = 1,
                            DateForViewing = new DateTime(2022, 4, 21, 13, 56, 31, 399, DateTimeKind.Local).AddTicks(1912),
                            DateUploaded = new DateTime(2022, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Temporär default av min bostad, så att det går att se hur det ser ut när man laddar in sidan",
                            GrossArea = 1200.0,
                            Latitude = 59.539400000000001,
                            LivingArea = 200.0,
                            Longitude = 18.428599999999999,
                            NrOfRooms = 6,
                            NrOfViews = 1,
                            PlotSize = 1000.0,
                            PostalTown = "Märsta",
                            Price = 12345678,
                            PropType = 1,
                            Sublocality = "Märsta Norra",
                            ZipCode = 12345
                        },
                        new
                        {
                            Id = 9,
                            Address = "Alsättersgatan 13B",
                            Balcony = false,
                            City = "Linköping",
                            ConstructionYear = 1960,
                            ContractType = 0,
                            DateForViewing = new DateTime(2022, 4, 21, 13, 56, 31, 399, DateTimeKind.Local).AddTicks(1914),
                            DateUploaded = new DateTime(2022, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Temporär default av en bostad på en annan ort, så att det går att se hur auto zoom och auto pan funkar.",
                            GrossArea = 25.0,
                            Latitude = 58.410431699999997,
                            LivingArea = 25.0,
                            Longitude = 15.5621776,
                            NrOfRooms = 1,
                            NrOfViews = 5000,
                            PlotSize = 25.0,
                            PostalTown = "Linköping",
                            Price = 5000,
                            PropType = 0,
                            Sublocality = "Ryd",
                            ZipCode = 58435
                        });
                });

            modelBuilder.Entity("Core.Models.RealEstateObjectViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ApartmentCheckbox")
                        .HasColumnType("bit");

                    b.Property<string>("Balcony")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FarmCheckBox")
                        .HasColumnType("bit");

                    b.Property<bool>("HolidayHomeCheckBox")
                        .HasColumnType("bit");

                    b.Property<bool>("HouseCheckBox")
                        .HasColumnType("bit");

                    b.Property<bool>("LotCheckBox")
                        .HasColumnType("bit");

                    b.Property<string>("MaxLivingArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxRooms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinLivingArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinRooms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewConstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OtherCheckBox")
                        .HasColumnType("bit");

                    b.Property<string>("PlotSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RowHouseCheckBox")
                        .HasColumnType("bit");

                    b.Property<string>("SearchString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SearchTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SortOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RealEstateObjectViewmodel");
                });

            modelBuilder.Entity("Core.Models.RealtorFirm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealtorLogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RealtorFirms");
                });

            modelBuilder.Entity("Core.Models.RealtorRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("RealtorRequests");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RealtorFirmId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RealtorFirmId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateObjectUser", b =>
                {
                    b.HasOne("Core.Models.RealEstateObject", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersFavoritedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateObjectUser1", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("InterestedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.RealEstateObject", null)
                        .WithMany()
                        .HasForeignKey("InterestingListingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealtorRequestUser", b =>
                {
                    b.HasOne("Core.Models.RealtorRequest", null)
                        .WithMany()
                        .HasForeignKey("RealtorRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Image", b =>
                {
                    b.HasOne("Core.Models.RealEstateObject", "RealEstateObject")
                        .WithMany("Images")
                        .HasForeignKey("RealEstateObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealEstateObject");
                });

            modelBuilder.Entity("Core.Models.RealEstateObject", b =>
                {
                    b.HasOne("Core.Models.RealEstateObjectViewModel", null)
                        .WithMany("RealEstateObjectsList")
                        .HasForeignKey("RealEstateObjectViewModelId");

                    b.HasOne("Core.Models.RealtorFirm", null)
                        .WithMany("FirmListings")
                        .HasForeignKey("RealtorFirmId");

                    b.HasOne("Core.Models.User", "Realtor")
                        .WithMany("UploadedRealEstateObjects")
                        .HasForeignKey("RealtorId");

                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("Core.Models.RealEstateObjectViewModel", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany("SearchHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.HasOne("Core.Models.RealtorFirm", "RealtorFirm")
                        .WithMany("Employees")
                        .HasForeignKey("RealtorFirmId");

                    b.Navigation("RealtorFirm");
                });

            modelBuilder.Entity("Core.Models.RealEstateObject", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Core.Models.RealEstateObjectViewModel", b =>
                {
                    b.Navigation("RealEstateObjectsList");
                });

            modelBuilder.Entity("Core.Models.RealtorFirm", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("FirmListings");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Navigation("SearchHistory");

                    b.Navigation("UploadedRealEstateObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
